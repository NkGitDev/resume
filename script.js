    (function() {
      const container = document.getElementById('house3d');
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0x111e3c);
      const camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);
      camera.position.set(6, 6, 10);
      const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });
      renderer.setSize(container.clientWidth, container.clientHeight);
      renderer.shadowMap.enabled = true;
      container.appendChild(renderer.domElement);
      const controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.1;
      controls.minDistance = 5;
      controls.maxDistance = 20;
      controls.target.set(0, 1.3, 0);
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
      directionalLight.position.set(8, 10, 8);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 1024;
      directionalLight.shadow.mapSize.height = 1024;
      directionalLight.shadow.camera.near = 1;
      directionalLight.shadow.camera.far = 20;
      directionalLight.shadow.camera.left = -10;
      directionalLight.shadow.camera.right = 10;
      directionalLight.shadow.camera.top = 10;
      directionalLight.shadow.camera.bottom = -10;
      scene.add(directionalLight);
      const floorGeo = new THREE.PlaneGeometry(30, 30);
      const floorMat = new THREE.ShadowMaterial({ opacity: 0.25 });
      const floor = new THREE.Mesh(floorGeo, floorMat);
      floor.rotation.x = -Math.PI / 2;
      floor.position.y = 0;
      floor.receiveShadow = true;
      scene.add(floor);
      const house = new THREE.Group();
      const wallsGeo = new THREE.BoxGeometry(5, 3, 5);
      const wallsMat = new THREE.MeshStandardMaterial({ color: 0xd2c6b8, roughness: 0.8, metalness: 0.1 });
      const walls = new THREE.Mesh(wallsGeo, wallsMat);
      walls.position.y = 1.5;
      walls.castShadow = true;
      walls.receiveShadow = true;
      house.add(walls);
      const roofGeo = new THREE.ConeGeometry(4, 2.2, 4);
      const roofMat = new THREE.MeshStandardMaterial({ color: 0xb2402d, roughness: 0.7, metalness: 0 });
      const roof = new THREE.Mesh(roofGeo, roofMat);
      roof.position.y = 4;
      roof.rotation.y = Math.PI / 4;
      roof.castShadow = true;
      house.add(roof);
      const doorGeo = new THREE.PlaneGeometry(1.2, 2);
      const doorMat = new THREE.MeshStandardMaterial({ color: 0x4b3025, roughness: 0.9 });
      const door = new THREE.Mesh(doorGeo, doorMat);
      door.position.set(0, 1, 2.501);
      door.castShadow = true;
      house.add(door);
      const windowGeo = new THREE.PlaneGeometry(1.2, 1.2);
      const windowMat = new THREE.MeshStandardMaterial({ color: 0x7ec8e3, roughness: 0.7, transparent: true, opacity: 0.6 });
      const window1 = new THREE.Mesh(windowGeo, windowMat);
      window1.position.set(-2.4, 1.75, 2.501);
      window1.castShadow = true;
      house.add(window1);
      const window2 = new THREE.Mesh(windowGeo, windowMat);
      window2.position.set(2.4, 1.75, 2.501);
      window2.castShadow = true;
      house.add(window2);
      scene.add(house);
      window.addEventListener('resize', () => {
        const w = container.clientWidth;
        const h = container.clientHeight;
        camera.aspect = w / h;
        camera.updateProjectionMatrix();
        renderer.setSize(w, h);
      });
      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }
      animate();
    })();